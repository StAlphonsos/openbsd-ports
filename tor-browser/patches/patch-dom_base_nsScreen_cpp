$OpenBSD$

diff -Nup mozilla-esr31/dom/base/nsScreen.cpp tor-browser/dom/base/nsScreen.cpp
--- dom/base/nsScreen.cpp.orig	Mon Jan  5 23:08:02 2015
+++ dom/base/nsScreen.cpp	Tue Feb 17 14:37:55 2015
@@ -67,6 +67,9 @@ NS_IMPL_RELEASE_INHERITED(nsScreen, DOMEventTargetHelp
 int32_t
 nsScreen::GetPixelDepth(ErrorResult& aRv)
 {
+  // For non-chrome callers, always return 24 to prevent fingerprinting.
+  if (!IsChrome()) return 24;
+
   nsDeviceContext* context = GetDeviceContext();
 
   if (!context) {
@@ -110,6 +113,9 @@ nsScreen::GetDeviceContext()
 nsresult
 nsScreen::GetRect(nsRect& aRect)
 {
+  // For non-chrome callers, return window inner rect to prevent fingerprinting.
+  if (!IsChrome()) return GetWindowInnerRect(aRect);
+
   nsDeviceContext *context = GetDeviceContext();
 
   if (!context) {
@@ -129,6 +135,9 @@ nsScreen::GetRect(nsRect& aRect)
 nsresult
 nsScreen::GetAvailRect(nsRect& aRect)
 {
+  // For non-chrome callers, return window inner rect to prevent fingerprinting.
+  if (!IsChrome()) return GetWindowInnerRect(aRect);
+
   nsDeviceContext *context = GetDeviceContext();
 
   if (!context) {
@@ -165,22 +174,26 @@ nsScreen::Notify(const hal::ScreenConfiguration& aConf
 void
 nsScreen::GetMozOrientation(nsString& aOrientation)
 {
-  switch (mOrientation) {
-  case eScreenOrientation_PortraitPrimary:
-    aOrientation.AssignLiteral("portrait-primary");
-    break;
-  case eScreenOrientation_PortraitSecondary:
-    aOrientation.AssignLiteral("portrait-secondary");
-    break;
-  case eScreenOrientation_LandscapePrimary:
+  if (!IsChrome()) {
     aOrientation.AssignLiteral("landscape-primary");
-    break;
-  case eScreenOrientation_LandscapeSecondary:
-    aOrientation.AssignLiteral("landscape-secondary");
-    break;
-  case eScreenOrientation_None:
-  default:
-    MOZ_CRASH("Unacceptable mOrientation value");
+  } else {
+    switch (mOrientation) {
+    case eScreenOrientation_PortraitPrimary:
+      aOrientation.AssignLiteral("portrait-primary");
+      break;
+    case eScreenOrientation_PortraitSecondary:
+      aOrientation.AssignLiteral("portrait-secondary");
+      break;
+    case eScreenOrientation_LandscapePrimary:
+      aOrientation.AssignLiteral("landscape-primary");
+      break;
+    case eScreenOrientation_LandscapeSecondary:
+      aOrientation.AssignLiteral("landscape-secondary");
+      break;
+    case eScreenOrientation_None:
+    default:
+      MOZ_CRASH("Unacceptable mOrientation value");
+    }
   }
 }
 
@@ -358,4 +371,44 @@ nsScreen::FullScreenEventListener::HandleEvent(nsIDOME
   hal::UnlockScreenOrientation();
 
   return NS_OK;
+}
+
+bool
+nsScreen::IsChrome()
+{
+  nsCOMPtr<nsPIDOMWindow> owner = GetOwner();
+  if (owner && owner->GetDocShell()) {
+    return owner->GetDocShell()->ItemType() == nsIDocShellTreeItem::typeChrome;
+  }
+  return false;
+}
+
+nsresult
+nsScreen::GetDOMWindow(nsIDOMWindow **aResult)
+{
+  NS_ENSURE_ARG_POINTER(aResult);
+  *aResult = NULL;
+
+  nsCOMPtr<nsPIDOMWindow> owner = GetOwner();
+  if (!owner)
+    return NS_ERROR_FAILURE;
+
+  nsCOMPtr<nsIDOMWindow> win = do_QueryInterface(owner);
+  NS_ENSURE_STATE(win);
+  win.swap(*aResult);
+
+  return NS_OK;
+}
+
+nsresult
+nsScreen::GetWindowInnerRect(nsRect& aRect)
+{
+  aRect.x = 0;
+  aRect.y = 0;
+  nsCOMPtr<nsIDOMWindow> win;
+  nsresult rv = GetDOMWindow(getter_AddRefs(win));
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = win->GetInnerWidth(&aRect.width);
+  NS_ENSURE_SUCCESS(rv, rv);
+  return win->GetInnerHeight(&aRect.height);
 }
