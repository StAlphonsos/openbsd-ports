$OpenBSD$

diff -Nup mozilla-esr31/dom/base/nsGlobalWindow.cpp tor-browser/dom/base/nsGlobalWindow.cpp
--- dom/base/nsGlobalWindow.cpp.orig	Mon Jan  5 23:08:02 2015
+++ dom/base/nsGlobalWindow.cpp	Tue Feb 17 14:37:55 2015
@@ -2671,6 +2671,11 @@ nsGlobalWindow::PreloadLocalStorage()
   }
 
   nsresult rv;
+  nsCOMPtr<nsIURI> firstPartyIsolationURI;
+  rv = GetFirstPartyIsolationURI(getter_AddRefs(firstPartyIsolationURI));
+  if (NS_FAILED(rv)) {
+    return;
+  }
 
   nsCOMPtr<nsIDOMStorageManager> storageManager =
     do_GetService("@mozilla.org/dom/localStorage-manager;1", &rv);
@@ -2678,7 +2683,7 @@ nsGlobalWindow::PreloadLocalStorage()
     return;
   }
 
-  storageManager->PrecacheStorage(principal);
+  storageManager->PrecacheStorageForFirstParty(firstPartyIsolationURI, principal);
 }
 
 void
@@ -4861,6 +4866,12 @@ nsGlobalWindow::GetOuterSize(ErrorResult& aError)
 {
   MOZ_ASSERT(IsOuterWindow());
 
+  if (!IsChrome()) {
+    CSSIntSize size;                                                                                                                                                                                       
+    aError = GetInnerSize(size);                                                                                                                                                                           
+    return nsIntSize(size.width, size.height);  
+  }
+
   nsCOMPtr<nsIBaseWindow> treeOwnerAsWin = GetTreeOwnerWindow();
   if (!treeOwnerAsWin) {
     aError.Throw(NS_ERROR_FAILURE);
@@ -4992,6 +5003,11 @@ nsGlobalWindow::GetScreenXY(ErrorResult& aError)
 {
   MOZ_ASSERT(IsOuterWindow());
 
+  // For non-chrome callers, always return (0,0) to prevent fingerprinting.
+  if (!IsChrome()) {
+    return nsIntPoint(0, 0);
+  }
+
   nsCOMPtr<nsIBaseWindow> treeOwnerAsWin = GetTreeOwnerWindow();
   if (!treeOwnerAsWin) {
     aError.Throw(NS_ERROR_FAILURE);
@@ -5056,6 +5072,9 @@ nsGlobalWindow::GetMozInnerScreenX(ErrorResult& aError
 {
   FORWARD_TO_OUTER_OR_THROW(GetMozInnerScreenX, (aError), aError, 0);
 
+  // For non-chrome callers, always return 0 to prevent fingerprinting.
+  if (!IsChrome()) return 0.0;
+
   nsRect r = GetInnerScreenRect();
   return nsPresContext::AppUnitsToFloatCSSPixels(r.x);
 }
@@ -5074,6 +5093,9 @@ nsGlobalWindow::GetMozInnerScreenY(ErrorResult& aError
 {
   FORWARD_TO_OUTER_OR_THROW(GetMozInnerScreenY, (aError), aError, 0);
 
+  // For non-chrome callers, always return 0 to prevent fingerprinting.
+  if (!IsChrome()) return 0.0;
+
   nsRect r = GetInnerScreenRect();
   return nsPresContext::AppUnitsToFloatCSSPixels(r.y);
 }
@@ -5412,6 +5434,20 @@ nsGlobalWindow::SetScreenY(int32_t aScreenY)
   return rv.ErrorCode();
 }
 
+bool
+nsGlobalWindow::IsChrome() const
+{
+  bool isChrome = false;
+
+  if (mDocShell) {
+    nsRefPtr<nsPresContext> presContext;
+    mDocShell->GetPresContext(getter_AddRefs(presContext));
+    isChrome = (presContext && presContext->IsChrome());
+  }
+
+  return isChrome;
+}
+
 // NOTE: Arguments to this function should have values scaled to
 // CSS pixels, not device pixels.
 void
@@ -7675,6 +7711,19 @@ nsGlobalWindow::CallerInnerWindow()
   return static_cast<nsGlobalWindow*>(win.get());
 }
 
+nsresult
+nsGlobalWindow::GetFirstPartyIsolationURI(nsIURI** aFirstPartyIsolationURI)
+{
+  nsCOMPtr<mozIThirdPartyUtil> thirdPartyUtil =
+                               do_GetService(THIRDPARTYUTIL_CONTRACTID);
+  if (!thirdPartyUtil)
+    return NS_ERROR_FAILURE;
+
+  nsCOMPtr<nsIDocument> doc = do_QueryInterface(mDoc);
+  return thirdPartyUtil->GetFirstPartyIsolationURI(NULL, doc, aFirstPartyIsolationURI);
+}
+
+
 /**
  * Class used to represent events generated by calls to Window.postMessage,
  * which asynchronously creates and dispatches events.
@@ -10240,7 +10289,14 @@ nsGlobalWindow::GetSessionStorage(ErrorResult& aError)
 
     nsCOMPtr<nsILoadContext> loadContext = do_QueryInterface(docShell);
 
-    aError = storageManager->CreateStorage(principal,
+    nsCOMPtr<nsIURI> firstPartyIsolationURI;
+    rv = GetFirstPartyIsolationURI(getter_AddRefs(firstPartyIsolationURI));
+    if (NS_FAILED(rv)) {
+      aError.Throw(rv);
+      return nullptr;
+    }
+
+    aError =  storageManager->CreateStorageForFirstParty(firstPartyIsolationURI, principal,
                                            documentURI,
                                            loadContext && loadContext->UsePrivateBrowsing(),
                                            getter_AddRefs(mSessionStorage));
@@ -10319,10 +10375,17 @@ nsGlobalWindow::GetLocalStorage(ErrorResult& aError)
       mDoc->GetDocumentURI(documentURI);
     }
 
+    nsCOMPtr<nsIURI> firstPartyIsolationURI;
+    rv = GetFirstPartyIsolationURI(getter_AddRefs(firstPartyIsolationURI));
+    if (NS_FAILED(rv)) {
+      aError.Throw(rv);
+      return nullptr;
+    }
+
     nsIDocShell* docShell = GetDocShell();
     nsCOMPtr<nsILoadContext> loadContext = do_QueryInterface(docShell);
 
-    aError = storageManager->CreateStorage(principal,
+    aError = storageManager->CreateStorageForFirstParty(firstPartyIsolationURI, principal,
                                            documentURI,
                                            loadContext && loadContext->UsePrivateBrowsing(),
                                            getter_AddRefs(mLocalStorage));
@@ -11134,7 +11197,13 @@ nsGlobalWindow::Observe(nsISupports* aSubject, const c
 
       nsCOMPtr<nsIDOMStorageManager> storageManager = do_QueryInterface(GetDocShell());
       if (storageManager) {
-        rv = storageManager->CheckStorage(principal, changingStorage, &check);
+        nsresult rv;
+        nsCOMPtr<nsIURI> firstPartyIsolationURI;
+        rv = GetFirstPartyIsolationURI(getter_AddRefs(firstPartyIsolationURI));
+        NS_ENSURE_SUCCESS(rv, rv);
+
+        rv = storageManager->CheckStorageForFirstParty(firstPartyIsolationURI,
+                                          principal, changingStorage, &check);
         if (NS_FAILED(rv)) {
           return rv;
         }
