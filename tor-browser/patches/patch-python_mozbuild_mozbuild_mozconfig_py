$OpenBSD$

diff -Nup mozilla-esr31/python/mozbuild/mozbuild/mozconfig.py tor-browser/python/mozbuild/mozbuild/mozconfig.py
--- python/mozbuild/mozbuild/mozconfig.py.orig	Mon Jan  5 23:07:59 2015
+++ python/mozbuild/mozbuild/mozconfig.py	Tue Dec 16 13:57:04 2014
@@ -65,12 +65,8 @@ class MozconfigLoader(ProcessExecutionMixin):
     DEPRECATED_TOPSRCDIR_PATHS = ('mozconfig.sh', 'myconfig.sh')
     DEPRECATED_HOME_PATHS = ('.mozconfig', '.mozconfig.sh', '.mozmyconfig.sh')
 
-    IGNORE_SHELL_VARIABLES = {'_'}
+    IGNORE_SHELL_VARIABLES = ('_')
 
-    ENVIRONMENT_VARIABLES = {
-        'CC', 'CXX', 'CFLAGS', 'CXXFLAGS', 'LDFLAGS', 'MOZ_OBJDIR',
-    }
-
     def __init__(self, topsrcdir):
         self.topsrcdir = topsrcdir
 
@@ -200,7 +196,6 @@ class MozconfigLoader(ProcessExecutionMixin):
             'make_flags': None,
             'make_extra': None,
             'env': None,
-            'vars': None,
         }
 
         if path is None:
@@ -236,59 +231,43 @@ class MozconfigLoader(ProcessExecutionMixin):
 
         parsed = self._parse_loader_output(output)
 
-        def diff_vars(vars_before, vars_after):
-            set1 = set(vars_before.keys()) - self.IGNORE_SHELL_VARIABLES
-            set2 = set(vars_after.keys()) - self.IGNORE_SHELL_VARIABLES
-            added = set2 - set1
-            removed = set1 - set2
-            maybe_modified = set1 & set2
-            changed = {
-                'added': {},
-                'removed': {},
-                'modified': {},
-                'unmodified': {},
-            }
+        all_variables = set(parsed['vars_before'].keys())
+        all_variables |= set(parsed['vars_after'].keys())
 
-            for key in added:
-                changed['added'][key] = vars_after[key]
+        changed = {
+            'added': {},
+            'removed': {},
+            'modified': {},
+            'unmodified': {},
+        }
 
-            for key in removed:
-                changed['removed'][key] = vars_before[key]
+        for key in all_variables:
+            if key in self.IGNORE_SHELL_VARIABLES:
+                continue
 
-            for key in maybe_modified:
-                if vars_before[key] != vars_after[key]:
-                    changed['modified'][key] = (
-                        vars_before[key], vars_after[key])
-                elif key in self.ENVIRONMENT_VARIABLES:
-                    # In order for irrelevant environment variable changes not
-                    # to incur in re-running configure, only a set of
-                    # environment variables are stored when they are
-                    # unmodified. Otherwise, changes such as using a different
-                    # terminal window, or even rebooting, would trigger
-                    # reconfigures.
-                    changed['unmodified'][key] = vars_after[key]
+            if key not in parsed['vars_before']:
+                changed['added'][key] = parsed['vars_after'][key]
+                continue
 
-            return changed
+            if key not in parsed['vars_after']:
+                changed['removed'][key] = parsed['vars_before'][key]
+                continue
 
-        result['env'] = diff_vars(parsed['env_before'], parsed['env_after'])
+            if parsed['vars_before'][key] != parsed['vars_after'][key]:
+                changed['modified'][key] = (
+                    parsed['vars_before'][key], parsed['vars_after'][key])
+                continue
 
-        # Environment variables also appear as shell variables, but that's
-        # uninteresting duplication of information. Filter them out.
-        filt = lambda x, y: {k: v for k, v in x.items() if k not in y}
-        result['vars'] = diff_vars(
-            filt(parsed['vars_before'], parsed['env_before']),
-            filt(parsed['vars_after'], parsed['env_after'])
-        )
+            changed['unmodified'][key] = parsed['vars_after'][key]
 
+        result['env'] = changed
+
         result['configure_args'] = [self._expand(o) for o in parsed['ac']]
 
         if moz_build_app is not None:
             result['configure_args'].extend(self._expand(o) for o in
                 parsed['ac_app'][moz_build_app])
 
-        if 'MOZ_OBJDIR' in parsed['env_before']:
-            result['topobjdir'] = parsed['env_before']['MOZ_OBJDIR']
-
         mk = [self._expand(o) for o in parsed['mk']]
 
         for o in mk:
@@ -318,8 +297,6 @@ class MozconfigLoader(ProcessExecutionMixin):
         ac_app_options = defaultdict(list)
         before_source = {}
         after_source = {}
-        env_before_source = {}
-        env_after_source = {}
 
         current = None
         current_type = None
@@ -362,14 +339,7 @@ class MozconfigLoader(ProcessExecutionMixin):
 
             assert current_type is not None
 
-            vars_mapping = {
-                'BEFORE_SOURCE': before_source,
-                'AFTER_SOURCE': after_source,
-                'ENV_BEFORE_SOURCE': env_before_source,
-                'ENV_AFTER_SOURCE': env_after_source,
-            }
-
-            if current_type in vars_mapping:
+            if current_type in ('BEFORE_SOURCE', 'AFTER_SOURCE'):
                 # mozconfigs are sourced using the Bourne shell (or at least
                 # in Bourne shell mode). This means |set| simply lists
                 # variables from the current shell (not functions). (Note that
@@ -430,7 +400,10 @@ class MozconfigLoader(ProcessExecutionMixin):
 
                 assert name is not None
 
-                vars_mapping[current_type][name] = value
+                if current_type == 'BEFORE_SOURCE':
+                    before_source[name] = value
+                else:
+                    after_source[name] = value
 
                 current = []
 
@@ -444,8 +417,6 @@ class MozconfigLoader(ProcessExecutionMixin):
             'ac_app': ac_app_options,
             'vars_before': before_source,
             'vars_after': after_source,
-            'env_before': env_before_source,
-            'env_after': env_after_source,
         }
 
     def _expand(self, s):
